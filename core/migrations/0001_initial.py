# Generated by Django 3.2.8 on 2021-11-21 05:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.appuser_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=100)),
                ('bank_branch', models.CharField(max_length=100)),
                ('bank_BSB', models.CharField(max_length=10)),
                ('bank_account_name', models.CharField(max_length=100)),
                ('bank_account_number', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PollOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('related_to', multiselectfield.db.fields.MultiSelectField(choices=[('Advocacy & Awareness', 'Advocacy & Awareness'), ('Agriculture', 'Agriculture'), ('Business & Economic Policy', 'Business & Economic Policy'), ('Child Education', 'Child Education'), ('Youth Empowerment', 'Youth Empowerment'), ('Citizenship', 'Citizenship'), ('Communication', 'Communication'), ('Conflict Resolution', 'Conflict Resolution'), ('Peace Building', 'Peace Building'), ('ICT', 'ICT'), ('Culture & Society', 'Culture & Society'), ('Democracy & Civic Rights', 'Democracy & Civic Rights'), ('Rural Development', 'Rural Development'), ('Disability & Handicap', 'Disability & Handicap'), ('Displaced Population & Refugees', 'Displaced Population & Refugees'), ('Education', 'Education'), ('Environment', 'Environment'), ('Family Care', 'Family Care'), ('Women’s Rights', 'Women’s Rights'), ('Governance', 'Governance'), ('Health', 'Health'), ('Human Rights', 'Human Rights'), ('Charity/Philanthropy', 'Charity/Philanthropy'), ('Labor', 'Labor'), ('Law & Legal Affairs', 'Law & Legal Affairs'), ('Migrant Workers', 'Migrant Workers'), ('Relief', 'Relief'), ('Reconstruction', 'Reconstruction'), ('Rehabilitation', 'Rehabilitation'), ('Research & Studies', 'Research & Studies'), ('Science', 'Science'), ('Social Media', 'Social Media'), ('Technology', 'Technology'), ('Transparency', 'Transparency'), ('Training & Capacity Building', 'Training & Capacity Building')], max_length=546)),
                ('text_body', models.TextField(max_length=500)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('modified_on', models.DateTimeField(blank=True, null=True)),
                ('anonymous', models.BooleanField(blank=True, default=False)),
                ('removed', models.BooleanField(blank=True, default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PostAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Request', 'Request'), ('Poll', 'Poll')], max_length=20)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_core.postattachment_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='NGOUser',
            fields=[
                ('appuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.appuser')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=150)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('address', models.CharField(max_length=150)),
                ('display_picture', models.ImageField(blank=True, default='default/default_dp.png', null=True, upload_to='display_picture')),
                ('establishment_date', models.DateField()),
                ('fields_of_work', multiselectfield.db.fields.MultiSelectField(choices=[('Advocacy & Awareness', 'Advocacy & Awareness'), ('Agriculture', 'Agriculture'), ('Business & Economic Policy', 'Business & Economic Policy'), ('Child Education', 'Child Education'), ('Youth Empowerment', 'Youth Empowerment'), ('Citizenship', 'Citizenship'), ('Communication', 'Communication'), ('Conflict Resolution', 'Conflict Resolution'), ('Peace Building', 'Peace Building'), ('ICT', 'ICT'), ('Culture & Society', 'Culture & Society'), ('Democracy & Civic Rights', 'Democracy & Civic Rights'), ('Rural Development', 'Rural Development'), ('Disability & Handicap', 'Disability & Handicap'), ('Displaced Population & Refugees', 'Displaced Population & Refugees'), ('Education', 'Education'), ('Environment', 'Environment'), ('Family Care', 'Family Care'), ('Women’s Rights', 'Women’s Rights'), ('Governance', 'Governance'), ('Health', 'Health'), ('Human Rights', 'Human Rights'), ('Charity/Philanthropy', 'Charity/Philanthropy'), ('Labor', 'Labor'), ('Law & Legal Affairs', 'Law & Legal Affairs'), ('Migrant Workers', 'Migrant Workers'), ('Relief', 'Relief'), ('Reconstruction', 'Reconstruction'), ('Rehabilitation', 'Rehabilitation'), ('Research & Studies', 'Research & Studies'), ('Science', 'Science'), ('Social Media', 'Social Media'), ('Technology', 'Technology'), ('Transparency', 'Transparency'), ('Training & Capacity Building', 'Training & Capacity Building')], max_length=546)),
                ('e_pay_number', models.CharField(blank=True, max_length=20)),
                ('bank', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.bank')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.appuser', models.Model),
        ),
        migrations.CreateModel(
            name='NormalUser',
            fields=[
                ('appuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.appuser')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=150)),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('LGBT', 'LGBT')], default='Male', max_length=6)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('address', models.CharField(max_length=150)),
                ('citizenship_photo', models.ImageField(blank=True, null=True, upload_to='citizenship')),
                ('display_picture', models.ImageField(blank=True, default='default/default_dp.png', null=True, upload_to='display_picture')),
                ('verified', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.appuser', models.Model),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(max_length=500)),
                ('action', models.CharField(choices=[('Post Remove', 'Post Remove'), ('Account Ban', 'Account Ban')], max_length=20)),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.post')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='post_attachment',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.postattachment'),
        ),
        migrations.AddField(
            model_name='post',
            name='posted_by',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='posted_by', to='core.appuser'),
        ),
        migrations.CreateModel(
            name='AdministrativeUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=150)),
                ('date_of_birth', models.DateField(null=True)),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('LGBT', 'LGBT')], default='Male', max_length=6)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True)),
                ('address', models.CharField(max_length=150)),
                ('citizenship_photo', models.ImageField(blank=True, null=True, upload_to='citizenship')),
                ('display_picture', models.ImageField(blank=True, default='default/default_dp.png', null=True, upload_to='display_picture')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PostRequest',
            fields=[
                ('postattachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.postattachment')),
                ('min', models.IntegerField()),
                ('max', models.IntegerField(blank=True, null=True)),
                ('target', models.IntegerField()),
                ('ends_on', models.DateField()),
                ('request_type', models.CharField(choices=[('Petition', 'Petition'), ('Join', 'Join')], max_length=20)),
                ('reacted_by', models.ManyToManyField(to='core.NormalUser')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.postattachment',),
        ),
        migrations.CreateModel(
            name='PostPoll',
            fields=[
                ('postattachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.postattachment')),
                ('ends_on', models.DateField()),
                ('option', models.ManyToManyField(to='core.PollOption')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.postattachment',),
        ),
        migrations.CreateModel(
            name='PostNormal',
            fields=[
                ('postattachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.postattachment')),
                ('post_image', models.ImageField(blank=True, null=True, upload_to='post')),
                ('down_vote', models.ManyToManyField(related_name='down_vote', to='core.NormalUser')),
                ('report', models.ManyToManyField(related_name='report', to='core.NormalUser')),
                ('up_vote', models.ManyToManyField(related_name='up_vote', to='core.NormalUser')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('core.postattachment',),
        ),
        migrations.AddField(
            model_name='post',
            name='poked_to',
            field=models.ManyToManyField(to='core.NGOUser'),
        ),
        migrations.AddField(
            model_name='polloption',
            name='reacted_by',
            field=models.ManyToManyField(to='core.NormalUser'),
        ),
    ]
